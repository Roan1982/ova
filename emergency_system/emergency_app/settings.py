"""
Django settings for emergency_app project.

Generated by 'django-admin startproject' using Django 5.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os

try:
    from dotenv import load_dotenv
except ImportError:
    def load_dotenv(*args, **kwargs):
        return False

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Cargar variables desde el archivo .env si está presente
for dotenv_path in (BASE_DIR / '.env', BASE_DIR.parent / '.env'):
    load_dotenv(dotenv_path, override=False)


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-bbxll#i(n!uog#o^lh5s%wm16_8%byoeik5^)=w6c-6fw#++z!'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['localhost', '127.0.0.1', 'ova-tujh.onrender.com']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'core',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'emergency_app.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'emergency_app.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# Configuración de base de datos con soporte para DATABASE_URL (Render/Heroku)
import dj_database_url

# Si DATABASE_URL está presente (producción en Render), usarla
# Si no, usar configuración manual o SQLite local
DATABASE_URL = os.environ.get('DATABASE_URL')

if DATABASE_URL:
    # Render proporciona DATABASE_URL automáticamente
    DATABASES = {
        'default': dj_database_url.config(
            default=DATABASE_URL,
            conn_max_age=600,
            conn_health_checks=True,
        )
    }
else:
    # Desarrollo local: intentar PostgreSQL si está configurado, sino SQLite
    DB_PASSWORD = os.environ.get('DB_PASSWORD')
    
    if DB_PASSWORD:
        # PostgreSQL local
        DATABASES = {
            'default': {
                'ENGINE': 'django.db.backends.postgresql',
                'NAME': os.environ.get('DB_NAME', 'ova'),
                'USER': os.environ.get('DB_USER', 'ova_user'),
                'PASSWORD': DB_PASSWORD,
                'HOST': os.environ.get('DB_HOST', 'dpg-d40kcrur433s738fcmr0-a'),
                'PORT': os.environ.get('DB_PORT', '5432'),
            }
        }
    else:
        # SQLite local (desarrollo sin PostgreSQL)
        DATABASES = {
            'default': {
                'ENGINE': 'django.db.backends.sqlite3',
                'NAME': BASE_DIR / 'db.sqlite3',
            }
        }

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'es'

TIME_ZONE = 'America/Argentina/Buenos_Aires'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Configuración de IA en la nube
AI_PROVIDER = os.environ.get('AI_PROVIDER', 'openai')
AI_TIMEOUT = int(os.environ.get('AI_TIMEOUT', '20'))
AI_MAX_RETRIES = int(os.environ.get('AI_MAX_RETRIES', '3'))

# OpenAI (por defecto)
OPENAI_API_KEY = os.environ.get('OPENAI_API_KEY')
OPENAI_MODEL = os.environ.get('OPENAI_MODEL', 'gpt-4o-mini')
OPENAI_API_BASE = os.environ.get('OPENAI_API_BASE', 'https://api.openai.com/v1')

# Watson Orchestrate
WATSON_API_KEY = os.environ.get('WATSON_API_KEY')
WATSON_INSTANCE_URL = os.environ.get(
    'WATSON_INSTANCE_URL',
    'https://api.dl.watson-orchestrate.ibm.com/instances/28251824-1653-4080-8097-8efa6c69fba8'
)
# Endpoint IAM para intercambio de API key por token (platform.saas para oferta AWS, o iam.cloud.ibm.com clásico)
WATSON_IAM_URL = os.environ.get('WATSON_IAM_URL', 'https://iam.cloud.ibm.com/identity/token')

# Ollama (local, opcional)
OLLAMA_BASE_URL = os.environ.get('OLLAMA_BASE_URL')
OLLAMA_MODEL = os.environ.get('OLLAMA_MODEL', 'gemma:4b')
OPENROUTE_API_KEY = os.environ.get('OPENROUTE_API_KEY')
MAPBOX_API_KEY = os.environ.get('MAPBOX_API_KEY')
ROUTING_MAX_RESULTS = int(os.environ.get('ROUTING_MAX_RESULTS', '6'))
ROUTING_VEHICLE_CANDIDATES = int(os.environ.get('ROUTING_VEHICLE_CANDIDATES', '6'))
ROUTING_AGENT_CANDIDATES = int(os.environ.get('ROUTING_AGENT_CANDIDATES', '4'))
ROUTING_CACHE_SIZE = int(os.environ.get('ROUTING_CACHE_SIZE', '128'))
OPENROUTE_BACKOFF_SECONDS = int(os.environ.get('OPENROUTE_BACKOFF_SECONDS', '120'))

# Servicios de ruteo externos
OPENROUTE_API_KEY = os.environ.get('OPENROUTE_API_KEY')
MAPBOX_API_KEY = os.environ.get('MAPBOX_API_KEY')
ROUTING_MAX_RESULTS = int(os.environ.get('ROUTING_MAX_RESULTS', '6'))
ROUTING_VEHICLE_CANDIDATES = int(os.environ.get('ROUTING_VEHICLE_CANDIDATES', '6'))
ROUTING_AGENT_CANDIDATES = int(os.environ.get('ROUTING_AGENT_CANDIDATES', '4'))
ROUTING_CACHE_SIZE = int(os.environ.get('ROUTING_CACHE_SIZE', '128'))
OPENROUTE_BACKOFF_SECONDS = int(os.environ.get('OPENROUTE_BACKOFF_SECONDS', '120'))

# === Archivos estáticos (CSS, JS, imágenes) ===
STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'  # requerido para collectstatic

# === Archivos de medios (fotos, etc) ===
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# === WhiteNoise para servir estáticos en producción ===
MIDDLEWARE.insert(1, 'whitenoise.middleware.WhiteNoiseMiddleware')

# Permitir cache de archivos estáticos comprimidos
STORAGES = {
    "staticfiles": {
        "BACKEND": "whitenoise.storage.CompressedManifestStaticFilesStorage",
    },
}
